#version 330 core


uniform sampler2D			normalTexture;
uniform sampler2D			depthTexture;
uniform sampler2D			specPowIntensTexture;
uniform sampler2DShadow		shadowmapTexture;

uniform vec3	viewSpotLampPosition;
uniform vec3	viewSpotLampDirection;

uniform float	invQuadMaxDistance;
uniform float	cutoffCosine;
uniform vec4	hdrColorAndIntensity;	//rgb - HDR Color, a - intensity

uniform mat4	inv_proj_mat;
uniform mat4	inv_view_mat;
uniform mat4	lamp_view_proj_mat;

uniform vec2	invScreenResolution;

layout ( location = 0 ) out vec4 outLightUp;


const float biasOffset = 4.0e-5;
const float invShadowmapResolution = 9.765625e-4;
const vec2 poissonDisk[ 4 ] = vec2[]
(
	vec2 ( -0.94201624, -0.39906216 ),
	vec2 ( 0.94558609, -0.76890725 ),
	vec2 ( -0.094184101, -0.92938870 ),
	vec2 ( 0.34495938, 0.29387760 )
);


void main ()
{
	//All calculation in view space!!!

	vec2 uv_coord = gl_FragCoord.xy * invScreenResolution;

	vec3 viewNormal = texture ( normalTexture, uv_coord ).xyz * 2.0 - 1.0;
	vec2 specPowIntens = texture ( specPowIntensTexture, uv_coord ).rb;
	specPowIntens.r *= 255.0;

	vec2 ndc = uv_coord * 2.0 - 1.0;
	float ndcDepth = texture ( depthTexture, uv_coord ).r * 2.0f - 1.0f;

	if ( ndcDepth == 1.0 )	//Very far point
		discard;

	vec4 normalizeCoordinates = vec4 ( ndc, ndcDepth, 1.0 );						//to cube [-1.0 1.0]^3
	vec4 rawViewFragCoordinates = inv_proj_mat * normalizeCoordinates;				//need to scale by rawViewFragCoordinates.w
	float invW = 1.0 / rawViewFragCoordinates.w;
	vec3 viewFragPosition = rawViewFragCoordinates.xyz * invW;

	vec3 viewLightDir = viewSpotLampPosition - viewFragPosition;
	vec3 nViewLightDir = normalize ( viewLightDir );
	float dotDirNorm = dot ( nViewLightDir, viewNormal );

	vec4 worldFragCoordinates = inv_view_mat * vec4 ( viewFragPosition, 1.0 );
	vec4 shadowCoordinates = lamp_view_proj_mat * worldFragCoordinates;
	float factor = 1.0 / shadowCoordinates.w;
	
	float currentSample = shadowCoordinates.z * factor - biasOffset * dotDirNorm;

	float shadowFactor = 0.0;
	vec3 pos;
	pos.z = currentSample;
	for ( int i = 0; i < 4; i++ )
	{
		pos.xy = shadowCoordinates.xy * factor + poissonDisk[ i ] * invShadowmapResolution;
		shadowFactor += texture ( shadowmapTexture, pos ) * 0.25;
	}

	float cosineVxD = dot ( -nViewLightDir, viewSpotLampDirection );
	if ( cosineVxD < cutoffCosine )
		discard;

	vec3 quadDelta = viewLightDir * viewLightDir;
	float quadDistance = quadDelta.x + quadDelta.y + quadDelta.z;
	float falloff = 1.0 - quadDistance * invQuadMaxDistance;
	if ( falloff < 0.0 )
		discard;

	float fDif = 1.0 - cutoffCosine; 
	falloff *= clamp ( ( cosineVxD - cutoffCosine ) / fDif, 0.0, 1.0 ) * shadowFactor; 

	outLightUp.rgb = hdrColorAndIntensity.rgb * falloff * max ( dotDirNorm, 0.0 );
	
	vec3 viewToObserverDir = normalize ( -viewFragPosition );
	vec3 viewMirroredDir = reflect ( -nViewLightDir, viewNormal );
	outLightUp.a = pow ( max ( dot ( viewToObserverDir, viewMirroredDir ), 0.001 ), specPowIntens.x ) * specPowIntens.y * hdrColorAndIntensity.a * falloff;
}